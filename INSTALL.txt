INSTALL INSTRUCTIONS (Assuming you already cloned the repo and nothing else)

To set up a python env (optional, you can likely use your own conda if preferred).
In cmd line:

- cd lero
- python3 -m venv lero_env
- source lero_env/bin/activate
- pip install --upgrade pip
- pip install torch joblib psycopg2 numpy


Next, set up postgres. In cmd line:

# 1. download the PostgreSQL 13.1  
    wget https://ftp.postgresql.org/pub/source/v13.1/postgresql-13.1.tar.bz2
    tar -xvf postgresql-13.1.tar.bz2

# 2. apply some modifications on it
    cd postgresql-13.1
    git apply ../0001-init-lero.patch

# 3. install PostgreSQL
    ./configure --prefix=$HOME/lero_pg
    make -j4
    make install
    export PATH=$HOME/lero_pg/bin:$PATH 
// ^^^ THIS LAST LINE is to make it easy to access this version of psql. Run it anytime "which psql" returns wrong postgres path

UNFORTUNAELY you will likely get some issues with install (at least for mac).
You will have to fix some files. Here are the fixes I had to make:

Go to your patched PostgreSQL source:
- cd ~/Desktop/EECS\ 584/Lero-on-PostgreSQL/postgresql-13.1

Then edit this file:
- nano src/Makefile.global

Add this line at the top:
CFLAGS += -std=c99

# 4. modify the configuration of PostgreSQL in postgresql.conf. Find these lines, uncomment them, and set to:

listen_addresses = '*'
geqo = off
max_parallel_workers = 0
max_parallel_workers_per_gather = 0



In the postgresql-13.1 folder, find src/backend/lero/utils.c and add:

#include <arpa/inet.h>

Next, in the same file, find the function send_and_receive_msg().
It contains an error - In the first if statement, it has:

    return;

Change this to:

    return NULL;

Now rerun the build:

make clean
make -j4
make install



Now, go back to "lero/" and run in cmd line:

- which psql

ensure that it is the correct one. 


Next, we have to load data. Create a database in postgres called "tpch".

You will need to clone the tpch-dbgen repo into your root (Lero-On-Postgresql)

    git clone https://github.com/electrum/tpch-dbgen.git
    cd tpch-dbgen
    make
    ./dbgen -s 1    
// ^^ this will generate 1GB dataset

NEXT you will have to copy the DDL from /TPCH_SQL_CODE.txt, and open the psql tpch database you created
You should just be able to run the DDL like this.

NEXT, quit and go back to terminal/cmd line, and run this to clean the files ( from inside tpch-dbgen):

- mkdir -p cleaned

- for file in *.tbl; do
    sed 's/|$//' "$file" > "cleaned/$file"
  done

And then to load them, run:

    psql -d tpch -c "\COPY region FROM 'cleaned/region.tbl' WITH (FORMAT csv, DELIMITER '|')"
    psql -d tpch -c "\COPY nation FROM 'cleaned/nation.tbl' WITH (FORMAT csv, DELIMITER '|')"
    psql -d tpch -c "\COPY part FROM 'cleaned/part.tbl' WITH (FORMAT csv, DELIMITER '|')"
    psql -d tpch -c "\COPY supplier FROM 'cleaned/supplier.tbl' WITH (FORMAT csv, DELIMITER '|')"
    psql -d tpch -c "\COPY partsupp FROM 'cleaned/partsupp.tbl' WITH (FORMAT csv, DELIMITER '|')"
    psql -d tpch -c "\COPY customer FROM 'cleaned/customer.tbl' WITH (FORMAT csv, DELIMITER '|')"
    psql -d tpch -c "\COPY orders FROM 'cleaned/orders.tbl' WITH (FORMAT csv, DELIMITER '|')"
    psql -d tpch -c "\COPY lineitem FROM 'cleaned/lineitem.tbl' WITH (FORMAT csv, DELIMITER '|')"

To verify this is done, go into tpch database and run:

    SELECT COUNT(*) FROM lineitem;
    SELECT COUNT(*) FROM orders;

and check that they have ~6 million and ~1.5 million rows respectively



To run training:

set "port" in lero/test_script/config.py from 54321 to 5432 (default postgres port)
And make sure to set your username and password. Generally, a lot of bugs can be 
solved via fixing these files:

lero/test_script/config.py

lero/server.conf

Now to run, in one terminal/command line tab in "lero/":

    python server.py

Make sure this server is always running, and that the patched postgres is always running, to execute the parts below.

In another tab, in "lero/test_script":
    python train_model.py --query_path tpch_train.txt --test_query_path tpch_test.txt --algo lero --query_num_per_chunk 20 --output_query_latency_file lero_tpch.log --model_prefix tpch_test_model --topK 3

This should begin training lero and generating logs. Note that modifications to the entire codebase
since our last successful run may cause difficulty or inaccuracy in outputs, but in general it should still run.
Four kinds of files will be generated gradually during the execution of this script:

    lero_tpch.log
    The best plan considered by model in Lero will be executed and the results will be output to this file.
    lero_tpch.log_exploratory
    Other plans for pairwise training of each query will be executed and output to this file.
    lero_tpch.log.training
    Integrate the results of "lero_tpch.log" and "lero_tpch.log_exploratory" for model training.
    lero_tpch.log_tpch_test_model_i
    The performance of the model after i-th training.


In order to compare the results, after Lero executes all the queries, we use PostgreSQL to execute them again. 
The plans of the training set and the test set will be saved in "pg_tpch_train.log" and "pg_tpch_test.log" respectively:

    python train_model.py --query_path tpch_train.txt  --algo pg --output_query_latency_file pg_tpch_train.log
    python train_model.py --query_path tpch_test.txt --algo pg --output_query_latency_file pg_tpch_test.log

Then, run visualization.ipynb to generate train and test images. Double check which log files it is reading from,
as it may be looking for ttnn log files rather than lero ones. Check these lines:

    In Cell 3: lero_run_time_dict = convert_runtime_file_to_dict("ttnn_tpch.log")
    In Cell 5: lero_run_time_test.append(sum_runtime_file("ttnn_tpch.log_ttnn_tpch_test_model_" + str(i)))

When running for Lero, change these to:

    In Cell 3: lero_run_time_dict = convert_runtime_file_to_dict("lero_tpch.log")
    In Cell 5: lero_run_time_test.append(sum_runtime_file("lero_tpch.log_tpch_test_model_" + str(i)))


TO TRAIN OUR TTNN MODEL, simply run:
    ./train.sh

you may have to run this first:
    chmod +x train.sh

To visualize our model output, revert visualizatio back to:

    In Cell 3: lero_run_time_dict = convert_runtime_file_to_dict("ttnn_tpch.log")
    In Cell 5: lero_run_time_test.append(sum_runtime_file("ttnn_tpch.log_ttnn_tpch_test_model_" + str(i)))

Then run.